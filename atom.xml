<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Adol&#39;s Note</title>
  
  <subtitle>人类一思考,上帝就发笑</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-12T08:05:54.489Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Adol</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>require和import的异同</title>
    <link href="http://yoursite.com/2019/07/12/require%E5%92%8Cimport%E7%9A%84%E5%BC%82%E5%90%8C/"/>
    <id>http://yoursite.com/2019/07/12/require和import的异同/</id>
    <published>2019-07-12T03:17:12.000Z</published>
    <updated>2019-07-12T08:05:54.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>怎么会想起来讨论下<span class="label default">require</span>和<span class="label default">import</span>用法的差异，是因为项目中的一个小bug。因为以前写过u3d的项目，里面使用c#语言大量的使用<span class="label default">枚举</span>和<span class="label default">全局变量</span>使得项目可读性很强，只是维护起来稍微有些繁琐。因为是vue项目，想让js使用全局变量想法也非常简单，一开始是想把全局变量挂在vue实例下，一种是挂在window实例下，还有一种就是哪里用到就import这个全局的js文件，那么就来说说这两种方法的异同。</p><h2 id="二、遵循的模块化规范不一样"><a href="#二、遵循的模块化规范不一样" class="headerlink" title="二、遵循的模块化规范不一样"></a>二、遵循的模块化规范不一样</h2><p>import和require的出现都是为了使得js可以支持模块化编程，这样可以是项目目录结构很清晰，也符合编程的单一职责原则。模块化规范有CommonJS、AMD、CMD等等，require值遵循CommonJS的规范，import遵循的是ES6模块化的规范。但是最总import会被babel编译为CommonJS，也就是 <span class="label default">import/export</span> 最终都是编译为 <span class="label default">require/exports</span> 来执行的。</p><h2 id="三、书写形式不一样"><a href="#三、书写形式不一样" class="headerlink" title="三、书写形式不一样"></a>三、书写形式不一样</h2><p><code>require/exports</code> 的用法只有以下三种简单的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">exports.fs = fs</span><br><span class="line"><span class="built_in">module</span>.exports = fs</span><br></pre></td></tr></table></figure><p><code>import/export</code> 的用法比较多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> fs&#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> &#123;readFile&#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> &#123;readFile <span class="keyword">as</span> read&#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> fs, &#123;readFile&#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> fs</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fs</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">readFile</span></span></span><br><span class="line"><span class="function"><span class="title">export</span> </span>&#123;readFile, read&#125;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'fs'</span></span><br></pre></td></tr></table></figure><h2 id="四、加载方式"><a href="#四、加载方式" class="headerlink" title="四、加载方式"></a>四、加载方式</h2><p><code>ES6模块</code>属于<code>编译时加载</code>，便于JS引入宏和类型检验。动态绑定。<br>而<code>CommonJS</code>属于<code>运行时加载</code>，只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。</p><h2 id="五、具体差异"><a href="#五、具体差异" class="headerlink" title="五、具体差异"></a>五、具体差异</h2><h3 id="1-require"><a href="#1-require" class="headerlink" title="1.require"></a>1.require</h3><p><code>CommonJS</code> 模块是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量;<br><code>CommonJS</code> 模块就是对象，输入时必须查找对象属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS模块</span></span><br><span class="line"><span class="keyword">let</span> &#123; stat, exists, readFile &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> _fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> stat = _fs.stat;</span><br><span class="line"><span class="keyword">let</span> exists = _fs.exists;</span><br><span class="line"><span class="keyword">let</span> readfile = _fs.readfile;</span><br></pre></td></tr></table></figure><p>1.对于基本数据类型，属于<code>复制</code>。即会被模块缓存。同时，在另一个模块可以对该模块输出的变量重新赋值。<br>2.对于复杂数据类型，属于<code>浅拷贝</code>。由于两个模块引用的对象指向同一个内存空间，因此对该模块的值做修改时会<code>影响</code>另一个模块。<br>3.当使用require命令加载某个模块时，就会运行<code>整个模块</code>的代码。<br>4.当使用require命令加载同一个模块时，<strong>不会再执行该模块，而是取到缓存之中的值</strong>。也就是说，CommonJS模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。<br>5.循环加载时，属于加载时执行。即脚本代码在require的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。</p><h3 id="2-import"><a href="#2-import" class="headerlink" title="2.import"></a>2.import</h3><p><code>ES6模块</code>不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入,实际上是一种<code>解构</code>的过程<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; stat, exists, readFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br></pre></td></tr></table></figure></p><p>上面代码的实质是从fs模块加载 3 个方法，其他方法不加载。这种加载称为<code>编译时加载</code>或者<code>静态加载</code>，即 ES6 可以在编译时就完成模块加载，效率要比 CommonJS 模块的加载方式高。当然，这也导致了没法引用 ES6 模块本身，因为它不是对象。</p><p>由于 ES6 模块是编译时加载，使得静态分析成为可能。有了它，就能进一步拓宽 JavaScript 的语法，比如引入宏（macro）和类型检验（type system）这些只能靠静态分析实现的功能。</p><p>1.ES6模块中的值属于【动态只读引用】。<br>2.对于只读来说，即不允许修改引入变量的值，import的变量是<code>只读的</code>，不论是基本数据类型还是复杂数据类型。当模块遇到import命令时，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。<br>3.对于动态来说，原始值发生变化，import加载的值也会发生变化。不论是基本数据类型还是复杂数据类型。<br>4.循环加载时，ES6模块是动态引用。只要两个模块之间存在某个引用，代码就能够执行。</p><h2 id="六、Bug容易出现的地方"><a href="#六、Bug容易出现的地方" class="headerlink" title="六、Bug容易出现的地方"></a>六、Bug容易出现的地方</h2><p><strong>ES6模块和commonJS模块还有一个非常重要的区别就是:ES6模块的import代码会被<code>hoisted</code>,我在写vue入口代码的时候给window挂载全局变量，但是其他的ES6模块拿不到这个window挂载的全局变量，后来才发现写在import代码上的逻辑代码是会在整个js文件所有import代码全部执行了才执行，所以在其他import模块取不到window的全局变量。但是用commonJS的require却可以，因为require是<code>运行时加载</code></strong></p><p>使用import导入模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="built_in">window</span>.aa = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'~/js/test'</span>; <span class="comment">//这段代码会被提到顶部执行，test模块找不到挂载在window的aa属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    aa: <span class="built_in">window</span>.aa</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出&#123;aa: undefined&#125;</span></span><br></pre></td></tr></table></figure></p><p>使用require导入模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="built_in">window</span>.aa = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="built_in">require</span>(<span class="string">'./common/js/test'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    aa: <span class="built_in">window</span>.aa</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出&#123;aa: 1&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="七、综上"><a href="#七、综上" class="headerlink" title="七、综上"></a>七、综上</h2><table><thead><tr><th>规范</th><th>加载方式</th><th>命令</th><th>特点  </th></tr></thead><tbody><tr><td>CommonJS/AMD</td><td>运行时加载</td><td>require</td><td>社区方案，提供了服务器/浏览器的模块加载方案。非语言层面的标准。只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。</td></tr><tr><td>ESMAScript6+</td><td>编译时加载</td><td>import</td><td>语言规格层面支持模块功能。支持编译时静态分析，便于JS引入宏和类型检验。动态绑定</td></tr></tbody></table><blockquote><p>import的使用方法详情可以参照阮一峰ES6语法</p><footer><strong>阮一峰ES6</strong><cite><a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">es6.ruanyifeng.com/#docs/module</a></cite></footer></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、说明&quot;&gt;&lt;a href=&quot;#一、说明&quot; class=&quot;headerlink&quot; title=&quot;一、说明&quot;&gt;&lt;/a&gt;一、说明&lt;/h2&gt;&lt;p&gt;怎么会想起来讨论下&lt;span class=&quot;label default&quot;&gt;require&lt;/span&gt;和&lt;span clas
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>背景图片自适应</title>
    <link href="http://yoursite.com/2019/07/09/%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>http://yoursite.com/2019/07/09/背景图片自适应/</id>
    <published>2019-07-09T03:44:58.000Z</published>
    <updated>2019-07-09T06:57:47.137Z</updated>
    
    <content type="html"><![CDATA[<p>设置图片的大小使用百分比可以做到图片宽高自适应，但如果是背景图片的话，有两种方法可以达到自适应。</p><p>html代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"music-view"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"music-view-title"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父容器css:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.music-view</span> &#123;</span><br><span class="line">​    position: fixed;</span><br><span class="line">​    <span class="selector-tag">top</span>: 0;</span><br><span class="line">​    <span class="selector-tag">left</span>: 0;</span><br><span class="line">​    <span class="selector-tag">bottom</span>: 0;</span><br><span class="line">​    <span class="selector-tag">right</span>: 0;</span><br><span class="line">​    background-color: $color-background;</span><br><span class="line">​    <span class="selector-tag">z-index</span>: 100;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里父容器设置fixed布局是为了将宽高占满，需要同时设置top，left，right，bottom的值，就像锚点一样。</strong></p><p>1.可以设置图片的width和height均为百分比，然后设置background-size和background-position属性。代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg-img</span> &#123;</span><br><span class="line">​    width: 100%;</span><br><span class="line">​    <span class="selector-tag">height</span>: 50%;</span><br><span class="line">​    <span class="selector-tag">background-size</span>: <span class="selector-tag">cover</span>;</span><br><span class="line">​    <span class="selector-tag">background-position</span>: <span class="selector-tag">center</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.可以设置图片的padding-top属性为百分比，代码如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg-img</span> &#123;</span><br><span class="line">​    width: 100%;</span><br><span class="line">​    <span class="selector-tag">padding-top</span>: 70%;</span><br><span class="line">​    <span class="selector-tag">background-size</span>: <span class="selector-tag">cover</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这两种方法都可以使得背景图片自适应，但是他们的原理是不一样的，得到的效果也不相同。</p><p>第一种方法设置width和height的值为百分比的话，<strong>他们的宽度和高度最终计算是取决于父容器</strong>。又因为设置了 background-position: center;得到的效果如下：</p><p><img src="/2019/07/09/背景图片自适应/1.png" alt="和父容器大小有关"></p><p>第二种方法是取决于图片自身宽度的小大来设置高度  padding-top = (高度/宽度)*100%，我这张图片是宽高1:1的图片，所以设置padding-top:70%图片会被按照高度的70%进行裁剪，由此设置得到的效果:</p><p><img src="/2019/07/09/背景图片自适应/2.png" alt="和图片本身大小有关"></p><p><strong>经过测试不同尺寸的大小，发现第二种方法设置背景图片的方法适应的更加好，因为相对于父容器，图片本身的大小更好掌控。</strong>再者第一种方法需要设置background-position: center；不然的话图片是从最左边开始显示，而第二种方法就不需要设置，像是相对于宽度做了整体的缩放。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;设置图片的大小使用百分比可以做到图片宽高自适应，但如果是背景图片的话，有两种方法可以达到自适应。&lt;/p&gt;
&lt;p&gt;html代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
</feed>
